<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Health Data Overview</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4"></script>
    <script src="https://cdn.jsdelivr.net/npm/luxon@^3"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@^1"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
</head>
<body>
    <h1>Health Data Overview</h1>

    <div>
        <label for="daterange">Select Date Range:</label>
        <input type="text" id="daterange" name="daterange" />
    </div>

    <h2>Chart</h2>
    <canvas id="healthChart"></canvas>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const labels = JSON.parse('{{{labels}}}');
            const heartRates = JSON.parse('{{{heartRates}}}');
            const oxygenLevels = JSON.parse('{{{oxygenLevels}}}');

            console.log({ labels, heartRates, oxygenLevels }); // Log data for debugging

            const ctx = document.getElementById('healthChart').getContext('2d');
            let healthChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: 'Heart Rate',
                        data: heartRates.map((value, index) => ({ x: labels[index], y: value })),
                        borderColor: 'rgb(255, 99, 132)',
                        backgroundColor: 'rgba(255, 99, 132, 0.5)',
                    }, {
                        label: 'Oxygen Saturation',
                        data: oxygenLevels.map((value, index) => ({ x: labels[index], y: value })),
                        borderColor: 'rgb(54, 162, 235)',
                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                    }]
                },
                options: {
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'minute',
                                tooltipFormat: 'yyyy-MM-dd HH:mm:ss',
                                displayFormats: {
                                    minute: 'yyyy-MM-dd HH:mm:ss'
                                }
                            },
                            title: {
                                display: true,
                                text: 'Time'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            suggestedMin: Math.min(...heartRates, ...oxygenLevels) - 10, // Adjust based on your data range
                            suggestedMax: Math.max(...heartRates, ...oxygenLevels) + 10, // Adjust based on your data range
                        }
                    }
                }
            });

            $('#daterange').daterangepicker({
                timePicker: true,
                timePicker24Hour: true,
                startDate: moment().startOf('day'),
                endDate: moment().endOf('day'),
                locale: {
                    format: 'YYYY-MM-DD HH:mm:ss'
                }
            }, function(start, end, label) {
                const startDate = start.toISOString();
                const endDate = end.toISOString();
                console.log(`New date range selected: ${startDate} to ${endDate}`);

                // Filter data based on selected date range
                const filteredLabels = labels.filter(label => label >= startDate && label <= endDate);
                const filteredHeartRates = heartRates.filter((value, index) => labels[index] >= startDate && labels[index] <= endDate);
                const filteredOxygenLevels = oxygenLevels.filter((value, index) => labels[index] >= startDate && labels[index] <= endDate);

                // Update chart data
                healthChart.data.datasets[0].data = filteredHeartRates.map((value, index) => ({ x: filteredLabels[index], y: value }));
                healthChart.data.datasets[1].data = filteredOxygenLevels.map((value, index) => ({ x: filteredLabels[index], y: value }));
                healthChart.options.scales.y.suggestedMin = Math.min(...filteredHeartRates, ...filteredOxygenLevels) - 10;
                healthChart.options.scales.y.suggestedMax = Math.max(...filteredHeartRates, ...filteredOxygenLevels) + 10;
                healthChart.update();
            });
        });
    </script>

    <h2>Table</h2>
    <table border="1">
        <thead>
            <tr>
                <th>Time</th>
                <th>Heart Rate (bpm)</th>
                <th>Oxygen Saturation (%)</th>
            </tr>
        </thead>
        <tbody>
            {{#each healthData}}
            <tr>
                <td>{{this.timestamp}}</td>
                <td>{{this.heartRate}}</td>
                <td>{{this.oxygenSaturation}}</td>
            </tr>
            {{/each}}
        </tbody>
    </table>
</body>
</html>
